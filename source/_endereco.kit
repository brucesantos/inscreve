<div class="mb-3">
    <label for="cep" class="form-label">CEP</label>
    <input type="text" class="form-control" id="cep" name="cep" placeholder="00000-000" required inputmode="numeric">
    <div id="viaCEPerror" class="invalid-feedback">
        <!-- resposta da API -->
    </div>
</div>
<!-- Logradouro -->
<div class="mb-3">
    <label class="form-label" for="addressName">Logradouro</label>
    <input type="text" class="form-control" id="addressName" name="addressName" placeholder="Rua Exemplo da Silva" required>
</div>
<!-- Numero -->
<div class="mb-3">
    <label for="addressNumber" class="form-label">Número</label>
    <input type="text" class="form-control" id="addressNumber" placeholder="000" name="addressNumber" required>
</div>
<!-- complemento -->
<div class="mb-3">
    <label for="complement" class="form-label">Complemento</label>
    <input type="text" class="form-control" id="complement" placeholder="Apartamento 000" name="complement">
</div>
<!-- bairro -->
<div class="mb-3">
    <label for="neighbourhood" class="form-label">Bairro</label>
    <input type="text" class="form-control" id="neighbourhood" placeholder="Nome do Bairro" name="neighbourhood" required>
</div>
<!-- Cidade -->
<div>
    <label for="addressState" class="form-label">Cidade</label>
    <div class="input-group mb-3">
        <select class="form-select" id="addressState" name="addressState" required style="max-width: 80px;">
            <!-- @import estadosbrasileiros -->
        </select>
        <select class="form-select" id="addressCity" name="addressCity" required>
            <option selected disabled value="">Escolha o Estado primeiro</option>
            <!-- City options will be populated here -->
        </select>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        var addressStateSelect = document.getElementById('addressState');
        var addressCitySelect = document.getElementById('addressCity');

        // Initially disable the addressCity select field
        addressCitySelect.disabled = true;

        // Add a change event listener to the addressState select field
        addressStateSelect.addEventListener('change', function() {
            // Get the selected state
            var selectedState = addressStateSelect.value;

            // Show a loading message in the addressCity select field and keep it disabled
            addressCitySelect.innerHTML = '<option>Carregando...</option>';
            addressCitySelect.disabled = true;

            // Fetch the cities of the selected state from the IBGE API
            fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedState}/municipios`)
                .then(response => response.json())
                .then(data => {
                    // Clear the addressCity select field
                    addressCitySelect.innerHTML = '<option selected disabled value="">Município</option>';

                    // Add an option for each city
                    data.forEach(city => {
                        var option = document.createElement('option');
                        option.value = city.nome;
                        option.text = city.nome;
                        addressCitySelect.appendChild(option);
                    });

                    // Enable the addressCity select field
                    addressCitySelect.disabled = false;
                })
                .catch(error => {
                    // Show an error message in the addressCity select field and keep it disabled
                    addressCitySelect.innerHTML = '<option>Error loading cities</option>';
                    addressCitySelect.disabled = true;

                    console.error('Error:', error);
                });
        });
    });

    document.getElementById('cep').addEventListener('keyup', function (e) {
        var cep = e.target.value.replace(/\D/g, ''); // Remove all non-numeric characters
        if (cep.length > 8) {
            cep = cep.slice(0, 8); // Limit to 8 characters
        }
        cep = cep.replace(/^(\d{5})(\d{3})/, '$1-$2'); // Insert dash after the fifth digit
        e.target.value = cep;

        // If the CEP is complete, fetch the address information
        if (cep.length === 9) {
            fetch(`https://viacep.com.br/ws/${cep.replace('-', '')}/json/`)
                .then(response => response.json())
                .then(data => {
                    if (data.erro) {
                        throw new Error('CEP inválido ou indisponível.');
                    }
                    // Populate the address fields
                    document.getElementById('addressName').value = data.logradouro;
                    document.getElementById('addressState').value = data.uf;

                    // Create a new option element for the city
                    var citySelect = document.getElementById('addressCity');
                    citySelect.innerHTML = ''; // Clear any existing options
                    var option = document.createElement('option');
                    option.value = data.localidade;
                    option.text = data.localidade;
                    citySelect.add(option);

                    document.getElementById('neighbourhood').value = data.bairro;
                    // Remove the is-invalid class and clear the error message
                    document.getElementById('cep').classList.remove('is-invalid');
                    document.getElementById('viaCEPerror').textContent = '';
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('viaCEPerror').textContent = error.message;
                    // Add the is-invalid class to show the error message
                    document.getElementById('cep').classList.add('is-invalid');

                    // Enable the addressState select field to allow the user to select a state
                    document.getElementById('addressState').disabled = false;
                });
        }
    });
</script>